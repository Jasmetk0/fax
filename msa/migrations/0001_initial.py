# Generated by Django 5.2.5 on 2025-09-07 12:46

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=120, null=True)),
                (
                    "country",
                    models.CharField(blank=True, default=None, max_length=3, null=True),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Season",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=32, null=True, unique=True),
                ),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "best_n",
                    models.PositiveSmallIntegerField(blank=True, default=16, null=True),
                ),
            ],
            options={
                "ordering": ["start_date"],
            },
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "phase",
                    models.CharField(
                        blank=True,
                        choices=[("QUAL", "Qualification"), ("MD", "Main Draw")],
                        max_length=8,
                        null=True,
                    ),
                ),
                ("round_name", models.CharField(blank=True, max_length=16, null=True)),
                ("slot_top", models.PositiveIntegerField(blank=True, null=True)),
                ("slot_bottom", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "best_of",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=5,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                ("win_by_two", models.BooleanField(default=True)),
                ("score", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PENDING", "Pending"),
                            ("SCHEDULED", "Scheduled"),
                            ("DONE", "Finished"),
                        ],
                        default="PENDING",
                        max_length=12,
                        null=True,
                    ),
                ),
                ("needs_review", models.BooleanField(default=False)),
                (
                    "player_bottom",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="matches_as_bottom",
                        to="msa.player",
                    ),
                ),
                (
                    "player_top",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="matches_as_top",
                        to="msa.player",
                    ),
                ),
                (
                    "winner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="wins",
                        to="msa.player",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RankingAdjustment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "scope",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ROLLING_ONLY", "Rolling only"),
                            ("SEASON", "Season"),
                            ("BOTH", "Both"),
                        ],
                        default="ROLLING_ONLY",
                        max_length=16,
                        null=True,
                    ),
                ),
                ("points_delta", models.IntegerField(blank=True, default=0, null=True)),
                ("start_monday", models.DateField(blank=True, null=True)),
                (
                    "duration_weeks",
                    models.PositiveSmallIntegerField(blank=True, default=61, null=True),
                ),
                (
                    "best_n_penalty",
                    models.SmallIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="msa.player",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_monday", "-duration_weeks"],
            },
        ),
        migrations.CreateModel(
            name="CategorySeason",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "draw_size",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(16, "16"), (32, "32"), (64, "64"), (128, "128")],
                        null=True,
                    ),
                ),
                (
                    "md_seeds_count",
                    models.PositiveSmallIntegerField(blank=True, default=8, null=True),
                ),
                (
                    "qualifiers_count",
                    models.PositiveSmallIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "qual_rounds",
                    models.PositiveSmallIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "qual_seeds_per_bracket",
                    models.PositiveSmallIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "wc_slots_default",
                    models.PositiveSmallIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "q_wc_slots_default",
                    models.PositiveSmallIntegerField(blank=True, default=0, null=True),
                ),
                ("scoring_md", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "scoring_qual_win",
                    models.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="msa.category",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="msa.season",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=120, null=True)),
                (
                    "slug",
                    models.SlugField(blank=True, max_length=140, null=True, unique=True),
                ),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "q_best_of",
                    models.PositiveSmallIntegerField(blank=True, default=3, null=True),
                ),
                (
                    "md_best_of",
                    models.PositiveSmallIntegerField(blank=True, default=5, null=True),
                ),
                (
                    "seeding_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SNAPSHOT", "Snapshot"),
                            ("CURRENT", "Current"),
                            ("NONE", "None"),
                        ],
                        default="SNAPSHOT",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "snapshot_label",
                    models.CharField(blank=True, default=None, max_length=120, null=True),
                ),
                (
                    "rng_seed_active",
                    models.BigIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("REG", "Registration"),
                            ("QUAL", "Qualification"),
                            ("MD", "Main Draw"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="REG",
                        max_length=12,
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="msa.category",
                    ),
                ),
                (
                    "category_season",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="msa.categoryseason",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="msa.season",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date", "name"],
            },
        ),
        migrations.CreateModel(
            name="Snapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CONFIRM_QUAL", "Confirm Qualification"),
                            ("CONFIRM_MD", "Confirm Main Draw"),
                            ("GENERATE", "Generate"),
                            ("REGENERATE", "Regenerate"),
                            ("MANUAL", "Manual Edit"),
                            ("REOPEN", "Reopen"),
                            ("BRUTAL", "Brutal Reset"),
                        ],
                        max_length=16,
                        null=True,
                    ),
                ),
                ("payload", models.JSONField(blank=True, null=True)),
                (
                    "created_at",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="msa.tournament",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("play_date", models.DateField(blank=True, null=True)),
                ("order", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "match",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedule",
                        to="msa.match",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="msa.tournament",
                    ),
                ),
            ],
            options={
                "ordering": ["play_date", "order"],
            },
        ),
        migrations.AddField(
            model_name="match",
            name="tournament",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="msa.tournament",
            ),
        ),
        migrations.CreateModel(
            name="TournamentEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entry_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DA", "Direct Acceptance"),
                            ("Q", "Qualifier"),
                            ("ALT", "Alternate/Reserve"),
                            ("WC", "Wild Card"),
                            ("QWC", "Qual Wild Card"),
                            ("LL", "Lucky Loser"),
                        ],
                        default="DA",
                        max_length=8,
                        null=True,
                    ),
                ),
                ("seed", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("wr_snapshot", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[("ACTIVE", "Active"), ("WITHDRAWN", "Withdrawn")],
                        default="ACTIVE",
                        max_length=12,
                        null=True,
                    ),
                ),
                ("position", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="msa.player",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="msa.tournament",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayerLicense",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="msa.player",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="msa.season",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("player", "season"), name="uniq_player_season_license"
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="categoryseason",
            constraint=models.UniqueConstraint(
                fields=("category", "season", "draw_size"),
                name="uniq_category_season_drawsize",
            ),
        ),
        migrations.AddConstraint(
            model_name="schedule",
            constraint=models.UniqueConstraint(
                fields=("tournament", "play_date", "order"),
                name="uniq_tournament_day_order",
            ),
        ),
        migrations.AddIndex(
            model_name="match",
            index=models.Index(
                fields=["tournament", "phase", "round_name"],
                name="msa_match_tournam_869f56_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="match",
            constraint=models.UniqueConstraint(
                fields=("tournament", "phase", "round_name", "slot_top", "slot_bottom"),
                name="uniq_match_slot_in_round",
            ),
        ),
        migrations.AddIndex(
            model_name="tournamententry",
            index=models.Index(
                fields=["tournament", "status"], name="msa_tournam_tournam_b65ff0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tournamententry",
            index=models.Index(
                fields=["tournament", "entry_type"],
                name="msa_tournam_tournam_b95cef_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="tournamententry",
            constraint=models.UniqueConstraint(
                condition=models.Q(("status", "ACTIVE")),
                fields=("tournament", "player"),
                name="uniq_active_entry_per_player_tournament",
            ),
        ),
        migrations.AddConstraint(
            model_name="tournamententry",
            constraint=models.UniqueConstraint(
                condition=models.Q(("status", "ACTIVE")),
                fields=("tournament", "position"),
                name="uniq_active_position_per_tournament",
            ),
        ),
    ]
